%define rpm_name     #RPM_NAME#
%define rpm_version  #RPM_VERSION#
%define rpm_release  #RPM_RELEASE#
%define rpm_packager #RPM_PACKAGER#

%define ruby_scl    rh-ruby22
%define ruby_pfx    %{ruby_scl}-
%define ruby_dir    /opt/rh/%{ruby_scl}/root
%define app_root    %{_var}/www/%{rpm_name}
%define app_bindir  %{app_root}/bin
%define app_etcdir  %{_sysconfdir}/%{rpm_name}
%define app_libdir  %{_var}/lib/%{rpm_name}
%define app_logdir  %{_var}/log/%{rpm_name}
%define app_tmpdir  %{_var}/tmp/%{rpm_name}

Name:           %{rpm_name}
Version:        %{rpm_version}
Release:        %{rpm_release}%{?dist}
Summary:        A flexible project management web application
Group:          Networking/WWW
License:        GPLv2+
URL:            http://www.redmine.org
Source0:        http://www.redmine.org/releases/#RPM_NAME#-#RPM_VERSION#.tar.gz
Source101:      %{rpm_name}-database.yml.sqlite3
Source102:      %{rpm_name}-database.yml.mysql2
Source103:      %{rpm_name}-database.yml.postgresql
Source104:      %{rpm_name}.logrotate
Source105:      %{rpm_name}.apache
Requires:       logrotate
Requires:       webserver
Requires:       %{name}-db
Requires:       %{name}-gems

BuildArch:      noarch

%description
Redmine is a flexible project management web application. Written using
Ruby on Rails framework, it is cross-platform and cross-database.

Overview

 * Multiple projects support
 * Flexible role based access control
 * Flexible issue tracking system
 * Gantt chart and calendar
 * News, documents & files management
 * Feeds & email notifications
 * Per project wiki
 * Per project forums
 * Time tracking
 * Custom fields for issues, time-entries, projects and users
 * SCM integration (SVN, CVS, Git, Mercurial, Bazaar and Darcs)
 * Issue creation via email
 * Multiple LDAP authentication support
 * User self-registration support
 * Multilanguage support
 * Multiple databases support


#-------------------------------------------------------------------------------
%package pg
Summary:        A flexible project management web application - pgsql connector
Group:          Networking/WWW
Requires:       %{name}-gems-pg   = %{version}-%{release}
Provides:       %{name}-pg = %{version}-%{release}
Provides:       %{name}-db = %{version}-%{release}

%description pg
Redmine is a flexible project management web application. Written using
Ruby on Rails framework, it is cross-platform and cross-database.

This package contains the needed modules to use postgresql as redmine's
database backend.


%post pg
pushd %{app_etcdir} > /dev/null

# Configure db if required
DB_CONF='database.yml'
[ -s "${DB_CONF}" ] || cp -af "${DB_CONF}.postgresql" "${DB_CONF}"
popd > /dev/null


%files pg
%{app_etcdir}/database.yml.postgresql
#-------------------------------------------------------------------------------
%package mysql
Summary:        A flexible project management web application - mysql connector
Group:          Networking/WWW
Requires:       %{name}-gems-mysql   = %{version}-%{release}
Provides:       %{name}-mysql = %{version}-%{release}
Provides:       %{name}-db    = %{version}-%{release}

%description mysql
Redmine is a flexible project management web application. Written using
Ruby on Rails framework, it is cross-platform and cross-database.

This package contains the needed modules to use mysql as redmine's
database backend.


%post mysql
pushd %{app_etcdir} > /dev/null

# Configure db if required
DB_CONF='database.yml'
[ -s "${DB_CONF}" ] || cp -af "${DB_CONF}.mysql2" "${DB_CONF}"
popd > /dev/null


%files mysql
%{app_etcdir}/database.yml.mysql2
#-------------------------------------------------------------------------------
%package sqlite
Summary:        A flexible project management web application - sqlite connector
Group:          Networking/WWW
Requires:       %{name}-gems-sqlite   = %{version}-%{release}
Provides:       %{name}-sqlite = %{version}-%{release}
Provides:       %{name}-db     = %{version}-%{release}

%description sqlite
Redmine is a flexible project management web application. Written using
Ruby on Rails framework, it is cross-platform and cross-database.

This package contains the needed modules to use sqlite as redmine's
database backend.


%post sqlite
pushd %{app_etcdir} > /dev/null

# Configure db if required
DB_CONF='database.yml'
[ -s "${DB_CONF}" ] || cp -af "${DB_CONF}.sqlite3" "${DB_CONF}"
popd > /dev/null


%files sqlite
%{app_etcdir}/database.yml.sqlite3
#-------------------------------------------------------------------------------
%package git
Summary:        A flexible project management web application - git backend
Group:          Networking/WWW
Requires:       git-core
Provides:       %{name}-git = %{version}-%{release}
Provides:       %{name}-scm = %{version}-%{release}

%description git
Redmine is a flexible project management web application. Written using
Ruby on Rails framework, it is cross-platform and cross-database.

This package contains the needed modules to use git as redmine's
version control system backend


%files git
#-------------------------------------------------------------------------------
%package svn
Summary:        A flexible project management web application - subversion backend
Group:          Networking/WWW
Requires:       subversion
Provides:       %{name}-svn = %{version}-%{release}
Provides:       %{name}-scm = %{version}-%{release}

%description svn
Redmine is a flexible project management web application. Written using
Ruby on Rails framework, it is cross-platform and cross-database.

This package contains the needed modules to use subversion as redmine's
version control system backend


%files svn
#-------------------------------------------------------------------------------
%package hg
Summary:        A flexible project management web application - mercurial backend
Group:          Networking/WWW
Requires:       mercurial
Provides:       %{name}-hg  = %{version}-%{release}
Provides:       %{name}-scm = %{version}-%{release}

%description hg
Redmine is a flexible project management web application. Written using
Ruby on Rails framework, it is cross-platform and cross-database.

This package contains the needed modules to use mercurial as redmine's
version control system backend


%files hg
#-------------------------------------------------------------------------------
%package bzr
Summary:        A flexible project management web application - bzr backend
Group:          Networking/WWW
Requires:       bzr
Provides:       %{name}-bzr = %{version}-%{release}
Provides:       %{name}-scm = %{version}-%{release}

%description bzr
Redmine is a flexible project management web application. Written using
Ruby on Rails framework, it is cross-platform and cross-database.

This package contains the needed modules to use bazaar as redmine's
version control system backend


%files bzr
#-------------------------------------------------------------------------------
%package cvs
Summary:        A flexible project management web application - cvs backend
Group:          Networking/WWW
Requires:       cvs
Provides:       %{name}-cvs = %{version}-%{release}
Provides:       %{name}-scm = %{version}-%{release}

%description cvs
Redmine is a flexible project management web application. Written using
Ruby on Rails framework, it is cross-platform and cross-database.

This package contains the needed modules to use cvs as redmine's
version control system backend


%files cvs
#-------------------------------------------------------------------------------


%prep
%setup -q -n %{rpm_name}-%{rpm_version}

# Cleanup
find . -name "delete.me" -exec rm {} \;
find . -name "empty" -exec rm {} \;
find . -name ".hgignore" -exec rm {} \;
find . -name ".gitignore" -exec rm {} \;
find . -name ".gitkeep" -exec rm {} \;
%{__rm} -rf .github
%{__rm} -rf test
%{__rm} -f config/environments/development.rb
%{__rm} -f config/environments/test*.rb
%{__rm} -f appveyor.yml


%build
# Nothing to build here


%install
install -d %{buildroot}%{app_root}
%{__mkdir} -p %{buildroot}/{%{app_etcdir},%{app_libdir},%{app_logdir},%{app_tmpdir}}
%{__cp} -rf config/* %{buildroot}%{app_etcdir}
%{__cp} -rf db %{buildroot}%{app_libdir}
%{__cp} -rf files %{buildroot}%{app_libdir}
%{__cp} -rf tmp/* %{buildroot}%{app_tmpdir}
%{__cp} -rf * %{buildroot}%{app_root}

# Provide DB configs
install -D -m644 %{SOURCE101} %{buildroot}%{app_etcdir}/database.yml.sqlite3
install -D -m644 %{SOURCE102} %{buildroot}%{app_etcdir}/database.yml.mysql2
install -D -m644 %{SOURCE103} %{buildroot}%{app_etcdir}/database.yml.postgresql

# Replace empty folders with sym links
pushd %{buildroot}%{app_root}
%{__rm} -rf {config,db,files,log,tmp}
ln -s %{app_etcdir} config
ln -s %{app_libdir}/db db
ln -s %{app_libdir}/files files
ln -s %{app_logdir} log
ln -s %{app_tmpdir} tmp
popd

# Donâ€™t include bundle and Gemfiles
%{__rm} -rf %{buildroot}%{app_root}/vendor
%{__rm} -rf %{buildroot}%{app_root}/Gemfile*


# Add Logrotate script
mkdir -p %{buildroot}%{_sysconfdir}/logrotate.d/
install -D -m644 %{SOURCE104} %{buildroot}%{_sysconfdir}/logrotate.d/%{name}

# Add httpd default conf
# TODO: support other webservers (nginx at least)
mkdir -p %{buildroot}%{_sysconfdir}/httpd/conf.d/
install -D -m644 %{SOURCE105} %{buildroot}%{_sysconfdir}/httpd/conf.d/%{name}.conf


%post
pushd %{app_root} > /dev/null

# Prepare log file if required
LOG_FILE="log/production.log"
if [ -n "${LOG_FILE}" -a ! -f "${LOG_FILE}" ]; then
  touch "${LOG_FILE}"
  chown nobody:nobody "${LOG_FILE}"
  chmod 0644 "${LOG_FILE}"
fi

# No clue why it is needed to unfroze - main post script won't find any gem otherwise!
scl enable %{ruby_scl} -- bundle config --local frozen 0 > /dev/null
scl enable %{ruby_scl} -- bundle show > /dev/null
scl enable %{ruby_scl} -- bundle config --local frozen 1 > /dev/null

# Generate secret token if required
if [ ! -f "config/initializers/secret_token.rb" ]; then
  echo -n 'Running generate_secret_token task... '
  RAILS_ENV=production scl enable %{ruby_scl} -- bundle exec rake generate_secret_token > /dev/null 2>&1
  if [ ${?} -eq 0 ]; then
    echo 'ok'
  else
    echo "error (check logs in $(pwd)/log)"
  fi
fi

# Create default db file if required
DB_CONF='config/database.yml'
DB_ADAPTER="$(sed -n -r -e '/^production:/,/^$/ { s/^\s+adapter:\s*(.+)$/\1/ p }' "${DB_CONF}")"
DB_FILE="$(sed -n -r -e '/^production:/,/^$/ { s/^\s+database:\s*(.+)$/\1/ p }' "${DB_CONF}")"
DB_DIR="$(dirname "${DB_FILE}")"

if [ "${DB_ADAPTER}" = 'sqlite3' -a -n "${DB_FILE}" -a ! -f "${DB_FILE}" ]; then
  [ -d "${DB_DIR}" ] || { mkdir -p "${DB_DIR}" && chown nobody:nobody "${DB_DIR}" && chmod 0755 "${DB_DIR}"; }
  touch "${DB_FILE}"
  chown nobody:nobody "${DB_FILE}"
  chmod 0644 "${DB_FILE}"
fi

# Initialize or migrate the DB
echo -n 'Running db:migrate task... '
RAILS_ENV=production scl enable %{ruby_scl} -- bundle exec rake db:migrate > /dev/null 2>&1
if [ ${?} -eq 0 ]; then
  echo 'ok'
else
  echo "error (check logs in $(pwd)/log)"
fi
popd > /dev/null


%postun
# Remove what's left, mostly vendor/bundle/...
%{__rm} -rf %{app_root}


%files
%defattr(-,root, root,-)
%{_sysconfdir}/logrotate.d/%{name}
%config(noreplace) %{_sysconfdir}/httpd/conf.d/%{name}.conf
%ghost %config(noreplace) %{app_etcdir}/database.yml
%doc %{app_root}/README.rdoc
%doc %{app_root}/CONTRIBUTING.md
%{app_root}/app/
%dir %{app_etcdir}/
%doc %{app_etcdir}/*.example
%{app_etcdir}/application.rb
%{app_etcdir}/boot.rb
%{app_etcdir}/environment.rb
%{app_etcdir}/environments/
%{app_etcdir}/initializers/
%{app_etcdir}/locales/
%{app_etcdir}/routes.rb
%config(noreplace) %{app_etcdir}/settings.yml
%attr(0755,nobody,nobody) %dir %{app_libdir}/db/
%{app_libdir}/db/*
%attr(0755,nobody,nobody) %dir %{app_libdir}/files/
%attr(0755,nobody,nobody) %dir %{app_logdir}/
%attr(0755,nobody,nobody) %dir %{app_tmpdir}/
%attr(0755,nobody,nobody) %dir %{app_tmpdir}/*
%dir %{app_root}/
%{app_root}/bin/
%{app_root}/config
%{app_root}/config.ru
%{app_root}/db
%{app_root}/doc/
%{app_root}/extra/
%{app_root}/files
%{app_root}/log
%{app_root}/lib/
%{app_root}/plugins/
%{app_root}/public/
%{app_root}/Rakefile
%{app_root}/tmp


%changelog
%include %{_specdir}/changelog
